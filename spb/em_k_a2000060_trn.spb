CREATE OR REPLACE PACKAGE BODY                   TRON2000.EM_K_A2000060_TRN AS
 --
 /* -------------------- VERSION = 1.22 -------------------- */
 --
 /* -------------------- MODIFICACIONES -------------------- 
 || 2016/01/14 - JMLOPEZG - 1.22 - (MU-2015-068590)
 || Se aÂ¿ade la funcion f_existe_tip_benef_2, esta funcion sera la encargada de
 || comprobar si existe tipo de beneficiario cuando se tiene en cuenta como beneficiario
 || al tomador de la poliza.
 */ --------------------------------------------------------
 --
 g_existe                BOOLEAN := FALSE;   
 g_existe_reg            BOOLEAN := FALSE;   
 --
 g_k_uno  CONSTANT NUMBER(1)  := trn.UNO;  
 --
 g_cod_idioma            g1010010.cod_idioma       %TYPE; 
 g_cod_mensaje           g1010020.cod_mensaje      %TYPE;
 g_anx_mensaje           g1010020.txt_mensaje      %TYPE;                                
 --
 CURSOR gc_a2000060 (pc_cod_cia      a2000060.cod_cia     %TYPE,
                     pc_num_poliza   a2000060.num_poliza  %TYPE)
 IS
    SELECT cod_cia          , 
           num_poliza       , 
           num_spto         , 
           num_apli         , 
           num_spto_apli    , 
           num_riesgo       , 
           tip_benef        , 
           num_secu         , 
           tip_docum        , 
           cod_docum        , 
           mca_principal    , 
           mca_calculo      , 
           mca_baja         , 
           mca_vigente      , 
           pct_participacion, 
           fec_vcto_cesion  , 
           imp_cesion       , 
           num_prestamo     , 
           tip_relac 
      FROM a2000060 a
     WHERE a.cod_cia     = pc_cod_cia
       AND a.num_poliza  = pc_num_poliza
       AND a.mca_vigente = 'S';
 --
 /* -----------------------------------------------------
 || pp_asigna :
 ||
 || Llama a trn_k_global.asigna
 */ -----------------------------------------------------
 --
 PROCEDURE pp_asigna(p_nom_global VARCHAR2,
                     p_val_global VARCHAR2) IS
 BEGIN
  --
  trn_k_global.asigna(p_nom_global,p_val_global);
  --
 END pp_asigna;
 --
 /* -----------------------------------------------------
 || pp_asigna :
 ||
 || Llama a trn_k_global.asigna
 */ -----------------------------------------------------
 --
 PROCEDURE pp_asigna(p_nom_global VARCHAR2,
                     p_val_global NUMBER  ) IS
 BEGIN
  --
  trn_k_global.asigna(p_nom_global,TO_CHAR(p_val_global));
  --
 END pp_asigna;
 --
 /* -----------------------------------------------------
 || pp_asigna :
 ||
 || Llama a trn_k_global.asigna
 */ -----------------------------------------------------
 --
 PROCEDURE pp_asigna(p_nom_global VARCHAR2,
                     p_val_global DATE    ) IS
 BEGIN
  --
  trn_k_global.asigna(p_nom_global,TO_CHAR(p_val_global,'ddmmyyyy'));
  --
 END pp_asigna;
 --
 /* --------------------------------------------------------
 || mx :
 ||
 || Genera la traza
 */ --------------------------------------------------------
 --
 PROCEDURE mx(p_tit VARCHAR2,
              p_val VARCHAR2) IS
 BEGIN
  --
  pp_asigna('fic_traza','num_poliza'   );
  pp_asigna('cab_traza','a2000060---->');
  --
  em_k_traza.p_escribe(p_tit,
                       p_val);
  --
 END mx;
 --
 /* --------------------------------------------------------
 || mx :
 ||
 || Genera la traza
 */ --------------------------------------------------------
 --
 PROCEDURE mx(p_tit VARCHAR2,
              p_val BOOLEAN ) IS
 BEGIN
  --
  pp_asigna('fic_traza','num_poliza'   );
  pp_asigna('cab_traza','a2000060---->');
  --
  em_k_traza.p_escribe(p_tit,
                       p_val);
  --
 END mx;
 /*
 || -------------------- p_comprueba_error --------------------
 */
 PROCEDURE p_comprueba_error IS
  --
  l_cod_mensaje g1010020.cod_mensaje%TYPE;
  l_txt_mensaje g1010020.txt_mensaje%TYPE;
  l_hay_error   EXCEPTION;
  --
  BEGIN
   IF NOT g_existe
    THEN
     l_cod_mensaje := 20001;
     l_txt_mensaje := ss_f_mensaje(l_cod_mensaje);
     l_txt_mensaje := l_txt_mensaje || ' (PK a2000060)';
     --
     RAISE_APPLICATION_ERROR(-l_cod_mensaje,l_txt_mensaje);
     --
   END IF;
   --
  END p_comprueba_error;
 /*
 || -------------------- p_lee --------------------
 */
 PROCEDURE p_lee(
                 p_cod_cia a2000060.cod_cia%TYPE,
                 p_num_poliza a2000060.num_poliza%TYPE,
                 p_num_spto a2000060.num_spto%TYPE,
                 p_num_apli a2000060.num_apli%TYPE,                                
                 p_num_spto_apli a2000060.num_spto_apli%TYPE,
                 p_tip_benef a2000060.tip_benef%TYPE,
                 p_num_riesgo a2000060.num_riesgo%TYPE,
                 p_tip_docum a2000060.tip_docum%TYPE,
                 p_cod_docum a2000060.cod_docum%TYPE) IS
 BEGIN
  OPEN        c_a2000060(
                         p_cod_cia,
                         p_num_poliza,
                         p_num_spto,
                         p_num_apli,
                         p_num_spto_apli,
                         p_tip_benef,
                         p_num_riesgo,
                         p_tip_docum,
                         p_cod_docum);
  FETCH       c_a2000060 INTO reg;
  g_existe := c_a2000060%FOUND;
  CLOSE       c_a2000060;
  --
  p_comprueba_error;
  --
 END p_lee;
 /*
 || -------------------- f_existe_tomador --------------------
 */
 FUNCTION  f_existe_tomador(
                 p_cod_cia a2000060.cod_cia%TYPE,
                 p_num_poliza a2000060.num_poliza%TYPE,
                 p_num_spto a2000060.num_spto%TYPE,
                 p_num_apli a2000060.num_apli%TYPE,
                 p_num_spto_apli a2000060.num_spto_apli%TYPE,
                 p_num_riesgo a2000060.num_riesgo%TYPE,
                 p_tip_docum a2000060.tip_docum%TYPE,
                 p_cod_docum a2000060.cod_docum%TYPE) RETURN VARCHAR2 IS
   --
   l_existe_benef     VARCHAR2(1) := 'N';
   --
   CURSOR c_a2000060_existe
   IS
      SELECT 'S'
        FROM a2000060 a
       WHERE a.cod_cia       = p_cod_cia
         AND a.num_poliza    = p_num_poliza
         AND a.num_spto      = (SELECT MAX(b.num_spto)
                                  FROM a2000060 b
                                 WHERE b.cod_cia     = p_cod_cia
                                   AND b.num_poliza  = p_num_poliza
                                   AND b.num_spto   <= p_num_spto
                                   AND b.tip_docum   = p_tip_docum
                                   AND b.cod_docum   = p_cod_docum
                                   AND b.num_riesgo  = p_num_riesgo
                                   AND b.num_spto NOT IN
                                    (SELECT c.num_spto
                                       FROM a2000030 c
                                      WHERE c.cod_cia    = p_cod_cia
                                        AND c.num_poliza = p_num_poliza
                                        AND NVL(c.mca_spto_anulado,'N') = 'S'
                                    )
                               )
         AND a.tip_docum         = p_tip_docum
         AND a.cod_docum         = p_cod_docum
         AND a.num_riesgo        = p_num_riesgo
         AND NVL(a.mca_baja,'N') = 'N' ;
 --
 BEGIN
  OPEN        c_a2000060_existe;
  FETCH       c_a2000060_existe INTO l_existe_benef;
  g_existe := c_a2000060_existe%FOUND;
  CLOSE       c_a2000060_existe;
  --
  IF g_existe 
  THEN
     l_existe_benef := 'S';
  ELSE
     l_existe_benef := 'N';
  END IF;
  RETURN l_existe_benef;
  --
  EXCEPTION
     WHEN TOO_MANY_ROWS THEN
        l_existe_benef := 'S';
        RETURN l_existe_benef;
 END f_existe_tomador;
/*
|| -------------------- f_existe_endosatario --------------------
*/
FUNCTION  f_existe_endosatario(
                p_cod_cia       a2000060.cod_cia%TYPE,
                p_num_poliza    a2000060.num_poliza%TYPE,
                p_num_spto      a2000060.num_spto%TYPE,
                p_num_apli      a2000060.num_apli%TYPE,
                p_num_spto_apli a2000060.num_spto_apli%TYPE,
                p_num_riesgo    a2000060.num_riesgo%TYPE ) RETURN VARCHAR2 IS
  --
  l_existe_endosatario  VARCHAR2(1) := 'N';
  --
  CURSOR c_a2000060_existe
  IS
     SELECT 'S'
       FROM a2000060 a
      WHERE a.cod_cia       = p_cod_cia
        AND a.num_poliza    = p_num_poliza
        AND a.num_spto      = (SELECT MAX(b.num_spto)
                                 FROM a2000060 b
                                WHERE b.cod_cia     = p_cod_cia
                                  AND b.num_poliza  = p_num_poliza
                                  AND b.num_spto   <= p_num_spto
                                  AND b.tip_benef   = 8
                                  AND b.num_riesgo  = p_num_riesgo
                                  AND b.num_spto NOT IN
                                   (SELECT c.num_spto
                                      FROM a2000030 c
                                     WHERE c.cod_cia    = p_cod_cia
                                       AND c.num_poliza = p_num_poliza
                                       AND NVL(c.mca_spto_anulado,'N') = 'S'
                                   )
                              )
        AND NVL(a.imp_cesion,0) != 0
        AND a.num_riesgo         = p_num_riesgo
        AND NVL(a.mca_baja,'N')  = 'N';
--
l_existe BOOLEAN := FALSE;
--
BEGIN
 OPEN        c_a2000060_existe;
 FETCH       c_a2000060_existe INTO l_existe_endosatario;
 l_existe := c_a2000060_existe%FOUND;
 CLOSE       c_a2000060_existe;
 --
 IF l_existe 
 THEN
    l_existe_endosatario := 'S';
 ELSE
    l_existe_endosatario := 'N';
 END IF;
 RETURN l_existe_endosatario;
 --
 EXCEPTION
    WHEN TOO_MANY_ROWS THEN
       l_existe_endosatario := 'S';
       RETURN l_existe_endosatario;
END f_existe_endosatario;
 /*
 || -------------------- f_num_secu --------------------
 */
 FUNCTION f_num_secu RETURN NUMBER IS
 BEGIN
  --
  p_comprueba_error;
  --
  RETURN reg.num_secu;
  --
 END f_num_secu;
 /*
 || -------------------- f_mca_vigente --------------------
 */
 FUNCTION f_mca_vigente RETURN VARCHAR2 IS
 BEGIN
  --
  p_comprueba_error;
  --
  RETURN reg.mca_vigente;
  --
 END f_mca_vigente;
 /*
 || -------------------- f_mca_baja --------------------
 */
 FUNCTION f_mca_baja RETURN VARCHAR2 IS
 BEGIN
  --
  p_comprueba_error;
  --
  RETURN reg.mca_baja;
  --
 END f_mca_baja;
 /*
 || -------------------- f_pct_participacion --------------------
 */
 FUNCTION f_pct_participacion RETURN NUMBER IS
 BEGIN
  --
  p_comprueba_error;
  --
  RETURN reg.pct_participacion;
  --
 END f_pct_participacion;
 /*
 || -------------------- f_fec_vcto_cesion --------------------
 */
 FUNCTION f_fec_vcto_cesion RETURN DATE IS
 BEGIN
  --
  p_comprueba_error;
  --
  RETURN reg.fec_vcto_cesion;
  --
 END f_fec_vcto_cesion;
 /*
 || -------------------- f_imp_cesion --------------------
 */
 FUNCTION f_imp_cesion RETURN NUMBER IS
 BEGIN
  --
  p_comprueba_error;
  --
  RETURN reg.imp_cesion;
  --
 END f_imp_cesion;
 --
 /*
 || -------------------- f_num_prestamo --------------------
 */
 FUNCTION f_num_prestamo RETURN VARCHAR2 IS
 BEGIN
  --
  p_comprueba_error;
  --
  RETURN reg.num_prestamo;
  --
 END f_num_prestamo; 
 --
 /* -------------------------------------------------------- 
 || f_mca_principal :
 || 
 || 
 */ -------------------------------------------------------- 
 --
 FUNCTION f_mca_principal RETURN VARCHAR2 IS
 BEGIN
  --
  p_comprueba_error;
  --
  RETURN reg.mca_principal;
  --
 END f_mca_principal;
 --
 /* -------------------------------------------------------- 
 || f_mca_calculo :
 || 
 || 
 */ -------------------------------------------------------- 
 --
 FUNCTION f_mca_calculo RETURN VARCHAR2 IS
 BEGIN
  --
  p_comprueba_error;
  --
  RETURN reg.mca_calculo;
  --
 END f_mca_calculo;
 --
 /* -------------------------------------------------------- 
 || f_cuantas_polizas :
 || 
 || Devuelve el numero de polizas que tiene un asegurado
 */ -------------------------------------------------------- 
 --
 FUNCTION f_cuantas_polizas (p_cod_cia    a2000030.cod_cia   %TYPE,
                             p_tip_benef  a2000060.tip_benef %TYPE,
                             p_tip_docum  a2000030.tip_docum %TYPE,
                             p_cod_docum  a2000030.cod_docum %TYPE,
                             p_num_poliza a2000030.num_poliza%TYPE)
         RETURN NUMBER IS 
  --
  l_num_polizas NUMBER;
  --
  CURSOR c_cuantas_polizas_60(pc_cod_cia    a2000030.cod_cia    %TYPE, 
                              pc_tip_benef  a2000060.tip_benef  %TYPE,
                              pc_tip_docum  a2000030.tip_docum  %TYPE, 
                              pc_cod_docum  a2000030.cod_docum  %TYPE, 
                              pc_num_poliza a2000030.num_poliza %TYPE) IS
      SELECT COUNT(DISTINCT(num_poliza))
        FROM a2000060
       WHERE cod_cia    = pc_cod_cia 
         AND tip_docum  = pc_tip_docum 
         AND cod_docum  = pc_cod_docum 
         AND num_poliza != pc_num_poliza
         AND tip_benef  = NVL(pc_tip_benef, tip_benef);
  --
 BEGIN
  --
  OPEN  c_cuantas_polizas_60 (p_cod_cia    ,
                              p_tip_benef  ,
                              p_tip_docum  ,
                              p_cod_docum  ,
                              p_num_poliza );
  --
  FETCH c_cuantas_polizas_60 INTO l_num_polizas;
  --
  CLOSE c_cuantas_polizas_60;
  --
  RETURN l_num_polizas;
  --
 END f_cuantas_polizas;
 --
 /* -------------------- MODIFICACIONES -------------------- 
 || Antonio   - 99/07/26
 || Creacion
 */ -------------------------------------------------------- 
 --
 PROCEDURE p_tip_benef_vigente
           (p_cod_cia       IN     a2000060.cod_cia      %TYPE,
            p_num_poliza    IN     a2000060.num_poliza   %TYPE,
            p_num_spto      IN     a2000060.num_spto     %TYPE,
            p_num_apli      IN     a2000060.num_apli     %TYPE,
            p_num_spto_apli IN     a2000060.num_spto_apli%TYPE,
            p_tip_benef     IN     a2000060.tip_benef    %TYPE,
            p_num_riesgo    IN     a2000060.num_riesgo   %TYPE,
            p_tip_docum     IN OUT a2000060.tip_docum    %TYPE,
            p_cod_docum     IN OUT a2000060.cod_docum    %TYPE) IS
  --
  CURSOR c_vigente IS
         SELECT tip_docum,
                cod_docum
           FROM a2000060
          WHERE cod_cia        = p_cod_cia      
            AND num_poliza     = p_num_poliza   
            AND num_spto      <= p_num_spto     
            AND num_apli      <= p_num_apli     
            AND num_spto_apli <= p_num_spto_apli
            AND tip_benef      = p_tip_benef   
            AND num_riesgo     = p_num_riesgo  
            AND mca_vigente    = 'S';
  --
  l_existe BOOLEAN;
  --
 BEGIN
  --
  OPEN        c_vigente;
  FETCH       c_vigente INTO p_tip_docum,
                             p_cod_docum;
  l_existe := c_vigente%FOUND;
  CLOSE       c_vigente;
  --
  IF NOT l_existe
   THEN
    --
    RAISE_APPLICATION_ERROR(-20001                                 ,
                            ss_f_mensaje(20001) || ' (PK a2000060)'
                           );
    --
  END IF;
  --
 END p_tip_benef_vigente;
 --
 /* -------------------- MODIFICACIONES -------------------- 
 || Antonio   - 99/12/27
 || Creacion
 */ -------------------------------------------------------- 
 --
 FUNCTION f_sum_imp_cesion(p_cod_cia    a2000060.cod_cia   %TYPE,
                           p_num_poliza a2000060.num_poliza%TYPE,
                           p_num_riesgo a2000060.num_riesgo%TYPE)
          RETURN NUMBER IS
  --
  CURSOR c_a2000060_imp_cesion IS
         SELECT NVL(SUM(NVL(imp_cesion,0)),0)
           FROM a2000060
          WHERE cod_cia              = p_cod_cia
            AND num_poliza           = p_num_poliza
            AND num_riesgo           = p_num_riesgo
            AND tip_benef            = '8'
            AND NVL(mca_baja   ,'N') = 'N'
            AND NVL(mca_vigente,'S') = 'S';
  --
  l_retorno NUMBER;
  --
 BEGIN
  --
  OPEN  c_a2000060_imp_cesion;
  FETCH c_a2000060_imp_cesion INTO l_retorno;
  CLOSE c_a2000060_imp_cesion;
  --
  RETURN l_retorno;
  --
 END f_sum_imp_cesion;
 --
 /* -------------------- MODIFICACIONES -------------------- 
 || Antonio   - 99/12/27
 || Creacion
 */ -------------------------------------------------------- 
 --
 PROCEDURE p_inserta(p_reg a2000060%ROWTYPE) IS
 --
 BEGIN
    --
    INSERT INTO a2000060
           (cod_cia          ,
            num_poliza       ,
            num_spto         ,
            num_apli         ,
            num_spto_apli    ,
            num_riesgo       ,
            tip_benef        ,
            num_secu         ,
            tip_docum        ,
            cod_docum        ,
            mca_principal    ,
            mca_calculo      ,
            mca_baja         ,
            mca_vigente      ,
            pct_participacion,
            fec_vcto_cesion  ,
            imp_cesion       ,
            num_prestamo     ,
            tip_relac
           )
    VALUES (
            p_reg.cod_cia          ,
            p_reg.num_poliza       ,
            p_reg.num_spto         ,
            p_reg.num_apli         ,
            p_reg.num_spto_apli    ,
            p_reg.num_riesgo       ,
            p_reg.tip_benef        ,
            p_reg.num_secu         ,
            p_reg.tip_docum        ,
            p_reg.cod_docum        ,
            p_reg.mca_principal    ,
            p_reg.mca_calculo      ,
            p_reg.mca_baja         ,
            p_reg.mca_vigente      ,
            p_reg.pct_participacion,
            p_reg.fec_vcto_cesion  ,
            p_reg.imp_cesion       ,
            p_reg.num_prestamo     ,
            p_reg.tip_relac 
           );
    --
 END p_inserta;
 --
/* -------------------- MODIFICACIONES -------------------- 
 || Antonio   - 99/12/27
 || Creacion
 */ -------------------------------------------------------- 
 --
 FUNCTION f_inserta(p_reg a2000060%ROWTYPE) RETURN VARCHAR2 IS
 --
 v_clave  ROWID;
 -- 
 BEGIN
    --
    INSERT INTO a2000060
           (cod_cia          ,
            num_poliza       ,
            num_spto         ,
            num_apli         ,
            num_spto_apli    ,
            num_riesgo       ,
            tip_benef        ,
            num_secu         ,
            tip_docum        ,
            cod_docum        ,
            mca_principal    ,
            mca_calculo      ,
            mca_baja         ,
            mca_vigente      ,
            pct_participacion,
            fec_vcto_cesion  ,
            imp_cesion       ,
            num_prestamo     ,
            tip_relac
           )
    VALUES (
            p_reg.cod_cia          ,
            p_reg.num_poliza       ,
            p_reg.num_spto         ,
            p_reg.num_apli         ,
            p_reg.num_spto_apli    ,
            p_reg.num_riesgo       ,
            p_reg.tip_benef        ,
            p_reg.num_secu         ,
            p_reg.tip_docum        ,
            p_reg.cod_docum        ,
            p_reg.mca_principal    ,
            p_reg.mca_calculo      ,
            p_reg.mca_baja         ,
            p_reg.mca_vigente      ,
            p_reg.pct_participacion,
            p_reg.fec_vcto_cesion  ,
            p_reg.imp_cesion       ,
            p_reg.num_prestamo     ,
            p_reg.tip_relac  
           )
       RETURNING ROWID INTO v_clave;
    --
    RETURN v_clave;
    --
 END f_inserta;
 -- 
 --
 /* -----------------------------------------------------
 || p_lee_vigente :
 || 
 || Lee el registro vigente
 */ -----------------------------------------------------
 --
 PROCEDURE p_lee_vigente(p_cod_cia    a2000060.cod_cia   %TYPE,
                         p_num_poliza a2000060.num_poliza%TYPE,
                         p_num_apli   a2000060.num_apli  %TYPE,
                         p_num_riesgo a2000060.num_riesgo%TYPE,
                         p_tip_benef  a2000060.tip_benef %TYPE,
                         p_tip_docum  a2000060.tip_docum %TYPE,
                         p_cod_docum  a2000060.cod_docum %TYPE) IS
  --
  CURSOR c_a2000060 IS
         SELECT *
           FROM a2000060
          WHERE cod_cia     = p_cod_cia      
            AND num_poliza  = p_num_poliza   
            AND num_apli    = p_num_apli     
            AND num_riesgo  = p_num_riesgo  
            AND tip_benef   = p_tip_benef   
            AND tip_docum   = p_tip_docum
            AND cod_docum   = p_cod_docum
            AND mca_vigente = 'S';
  --
 BEGIN
  --
  OPEN  c_a2000060;
  FETCH c_a2000060 INTO reg;
  g_existe_reg := c_a2000060%FOUND;
  CLOSE c_a2000060;
  --
  g_existe := TRUE;
  --
 END p_lee_vigente;
  --
 /* -----------------------------------------------------
 || p_lee_vigente :
 || 
 || Lee el registro vigente
 */ -----------------------------------------------------
 --
 FUNCTION f_lee_actual(p_cod_cia       a2000060.cod_cia       %TYPE,
                       p_num_poliza    a2000060.num_poliza    %TYPE,
                       p_num_spto      a2000060.num_spto      %TYPE,
                       p_num_apli      a2000060.num_apli      %TYPE,
                       p_num_spto_apli a2000060.num_spto_apli %TYPE,
                       p_num_riesgo    a2000060.num_riesgo    %TYPE,
                       p_tip_benef     a2000060.tip_benef     %TYPE,
                       p_tip_docum     a2000060.tip_docum     %TYPE,
                       p_cod_docum     a2000060.cod_docum     %TYPE) 
                       RETURN BOOLEAN IS
  --
  CURSOR c_a2000060_a IS
         SELECT *
           FROM a2000060
          WHERE cod_cia       = p_cod_cia      
            AND num_poliza    = p_num_poliza
            AND num_spto      = p_num_spto  
            AND num_apli      = p_num_apli     
            AND num_spto_apli = p_num_spto_apli
            AND num_riesgo    = p_num_riesgo  
            AND tip_benef     = p_tip_benef   
            AND tip_docum     = p_tip_docum
            AND cod_docum     = p_cod_docum;
  --
  l_reg c_a2000060_a%ROWTYPE; 
  l_existe_reg BOOLEAN;         
  --
 BEGIN
  --
  OPEN  c_a2000060_a;
  FETCH c_a2000060_a INTO l_reg;
  l_existe_reg := c_a2000060_a%FOUND;
  CLOSE c_a2000060_a;
  --
  RETURN l_existe_reg;
  --
 END f_lee_actual;
 --
 /* -----------------------------------------------------
 || p_devuelve_tip_benef :
 ||
 || Devuelve el tipo y codigo de documento de un tipo
 || de beneficiario. Es utilizado para sabe rel benefi-
 || ciario de referencia en los batch
 */ -----------------------------------------------------
 --
 PROCEDURE p_devuelve_tip_benef
                        (p_cod_cia       IN     a2000060.cod_cia      %TYPE,
                         p_num_poliza    IN     a2000060.num_poliza   %TYPE,
                         p_num_spto      IN     a2000060.num_spto     %TYPE,
                         p_num_apli      IN     a2000060.num_apli     %TYPE,
                         p_num_spto_apli IN     a2000060.num_spto_apli%TYPE,
                         p_tip_benef     IN     a2000060.tip_benef    %TYPE,
                         p_num_riesgo    IN     a2000060.num_riesgo   %TYPE,
                         p_tip_docum     IN OUT a2000060.tip_docum    %TYPE,
                         p_cod_docum     IN OUT a2000060.cod_docum    %TYPE) IS
  --
  CURSOR c_a2000060 IS
         SELECT tip_docum,
                cod_docum
           FROM a2000060
          WHERE cod_cia       = p_cod_cia      
            AND num_poliza    = p_num_poliza   
            AND num_spto      = p_num_spto     
            AND num_apli      = p_num_apli     
            AND num_spto_apli = p_num_spto_apli
            AND tip_benef     = p_tip_benef   
            AND num_riesgo    = p_num_riesgo  
            AND mca_vigente   = 'S';
  --
 BEGIN
  --
  OPEN  c_a2000060;
  FETCH c_a2000060 INTO p_tip_docum,
                        p_cod_docum;
  CLOSE c_a2000060;
  --
 END p_devuelve_tip_benef;
 --
 /*------------ DESCRIPCION -----------------------------
 || Verifica si existe o no un determinado beneficiario
 */ -----------------------------------------------------
 -- 
 FUNCTION f_existe_tip_benef
          (p_cod_cia       a2000060.cod_cia        %TYPE,
           p_num_poliza    a2000060.num_poliza     %TYPE,
           p_num_spto      a2000060.num_spto       %TYPE,
           p_num_apli      a2000060.num_apli       %TYPE,
           p_num_spto_apli a2000060.num_spto_apli  %TYPE,
           p_num_riesgo    a2000060.num_riesgo     %TYPE,
           p_tip_benef     a2000060.tip_benef      %TYPE )
          RETURN VARCHAR2
  IS                
  --
  l_existe_tip_benef  VARCHAR2(1) := 'N';
  --
  CURSOR c_a2000060_existe_tip_benef
  IS
     SELECT 'S'
       FROM a2000060 a
      WHERE a.cod_cia       = p_cod_cia
        AND a.num_poliza    = p_num_poliza
        AND a.num_spto      = (SELECT MAX(b.num_spto)
                                 FROM a2000060 b
                                WHERE b.cod_cia     = p_cod_cia
                                  AND b.num_poliza  = p_num_poliza
                                  AND b.num_spto   <= p_num_spto
                                  AND b.tip_benef   = p_tip_benef
                                  AND b.num_riesgo  = p_num_riesgo
                                  AND b.num_spto NOT IN
                                   (SELECT c.num_spto
                                      FROM a2000030 c
                                     WHERE c.cod_cia    = p_cod_cia
                                       AND c.num_poliza = p_num_poliza
                                       AND NVL(c.mca_spto_anulado,'N') = 'S'
                                   )
                              )
        AND a.num_riesgo         = p_num_riesgo
        AND NVL(a.mca_baja,'N')  = 'N';
 --
 l_existe BOOLEAN := FALSE;
 --
 BEGIN
   --
   OPEN        c_a2000060_existe_tip_benef;
   FETCH       c_a2000060_existe_tip_benef INTO l_existe_tip_benef;
   --
   l_existe := c_a2000060_existe_tip_benef%FOUND;
   --
   CLOSE       c_a2000060_existe_tip_benef;
   --
   IF l_existe 
   THEN
     --
     l_existe_tip_benef := 'S';
     --
   ELSE
     --
     l_existe_tip_benef := 'N';
     --
   END IF;
   --
   RETURN l_existe_tip_benef;
   --
 EXCEPTION
 WHEN TOO_MANY_ROWS 
 THEN
   --
   l_existe_tip_benef := 'S';
   --
   RETURN l_existe_tip_benef;
   --
 END f_existe_tip_benef; 
--
 /*------------ DESCRIPCION -----------------------------
 || Verifica si existe o no un determinado beneficiario, teniendo
 || en cuenta que el beneficiario puede ser el tomador de la poliza
 */ -----------------------------------------------------
 -- 
 FUNCTION f_existe_tip_benef_2
          (p_cod_cia       a2000060.cod_cia        %TYPE,
           p_num_poliza    a2000060.num_poliza     %TYPE,
           p_num_spto      a2000060.num_spto       %TYPE,
           p_num_apli      a2000060.num_apli       %TYPE,
           p_num_spto_apli a2000060.num_spto_apli  %TYPE,
           p_num_riesgo    a2000060.num_riesgo     %TYPE,
           p_tip_benef     a2000060.tip_benef      %TYPE )
          RETURN VARCHAR2
  IS                
  --
  l_existe_tip_benef  VARCHAR2(1) := 'N';
  --
  CURSOR c_a2000060_existe_tip_benef
  IS
     SELECT 'S'
       FROM a2000060 a
      WHERE a.cod_cia       = p_cod_cia
        AND a.num_poliza    = p_num_poliza
        AND a.num_spto      = (SELECT MAX(b.num_spto)
                                 FROM a2000060 b
                                WHERE b.cod_cia     = p_cod_cia
                                  AND b.num_poliza  = p_num_poliza
                                  AND b.num_spto   <= p_num_spto
                                  AND b.tip_benef   = p_tip_benef
                                  AND b.num_riesgo  IN (0, p_num_riesgo)
                                  AND b.num_spto NOT IN
                                   (SELECT c.num_spto
                                      FROM a2000030 c
                                     WHERE c.cod_cia    = p_cod_cia
                                       AND c.num_poliza = p_num_poliza
                                       AND NVL(c.mca_spto_anulado,'N') = 'S'
                                   )
                              )
        AND a.num_riesgo    IN (0, p_num_riesgo)
        AND a.tip_benef     = p_tip_benef
        AND NVL(a.mca_baja,'N')  = 'N';
 --
 l_existe BOOLEAN := FALSE;
 --
 BEGIN
   --
   OPEN        c_a2000060_existe_tip_benef;
   FETCH       c_a2000060_existe_tip_benef INTO l_existe_tip_benef;
   --
   l_existe := c_a2000060_existe_tip_benef%FOUND;
   --
   CLOSE       c_a2000060_existe_tip_benef;
   --
   IF l_existe 
   THEN
     --
     l_existe_tip_benef := 'S';
     --
   ELSE
     --
     l_existe_tip_benef := 'N';
     --
   END IF;
   --
   RETURN l_existe_tip_benef;
   --
 EXCEPTION
 WHEN TOO_MANY_ROWS 
 THEN
   --
   l_existe_tip_benef := 'S';
   --
   RETURN l_existe_tip_benef;
   --
 END f_existe_tip_benef_2; 
 --
 /*------------ DESCRIPCION -----------------------------
 || Sevuelve la tabla con los datos de los subagentes vigentes
 || por pÂ¿liza. 
 */ -----------------------------------------------------
 -- 
 FUNCTION f_tab_subagentes( p_cod_cia         a2000030.cod_cia       %TYPE,
                            p_num_poliza      a2000030.num_poliza    %TYPE,
                            p_num_apli        a2000030.num_apli      %TYPE,
                            p_fec_vigencia    a2000030.fec_efec_spto %TYPE )
          RETURN dc_k_a1001337.table_cod_emp_agt IS    
 --
 l_k_tip_benef_subagente    a2000060.tip_benef      %TYPE := em.TIP_BENEF_SUBAGENTE; 
 l_cod_act_tercero          g2001801.cod_act_tercero%TYPE;     
 --
 l_k_no                     VARCHAR2(1)             := trn.NO;
 l_k_si                     VARCHAR2(1)             := trn.SI;  
 l_k_nulo                   VARCHAR2(1)             := trn.NULO;
 --
 CURSOR  l_c_subagentes IS   
  SELECT a.tip_docum, 
         a.cod_docum
  FROM   a2000060 a
 WHERE   a.cod_cia       = p_cod_cia
   AND   a.num_poliza    = p_num_poliza       
   AND   a.num_apli      = p_num_apli
   AND   a.tip_benef     = l_k_tip_benef_subagente  
   AND   a.num_spto      = (SELECT MAX(b.num_spto)
                              FROM a2000060 b,
                                   a2000030 c
                             WHERE b.cod_cia          = a.cod_cia
                               AND b.num_poliza       = a.num_poliza
                               AND b.num_apli         = a.num_apli
                               AND b.tip_docum        = a.tip_docum
                               AND b.cod_docum        = a.cod_docum
                               AND b.tip_benef        = l_k_tip_benef_subagente     
                               AND c.cod_cia          = b.cod_cia
                               AND c.num_poliza       = b.num_poliza
                               AND c.num_spto         = b.num_spto
                               AND c.num_apli         = b.num_apli
                               AND c.num_spto_apli    = b.num_spto_apli      
                               AND c.fec_efec_spto   <= p_fec_vigencia
                               AND c.mca_spto_anulado = l_k_no
                           )
   AND   a.mca_baja        = 'N'                         
 ; 
 --    
 l_reg_subag       l_c_subagentes       %ROWTYPE;
 --
 l_cod_tercero     v1001390.COD_TERCERO %TYPE;     
 --
 p_t_tab_subag     dc_k_a1001337.table_cod_emp_agt;
 --
 l_inx             BINARY_INTEGER := trn.CERO;   
 --
 BEGIN                    
   --
   em_k_g2001801.p_lee ( p_cod_cia   => p_cod_cia, 
                         p_tip_benef => l_k_tip_benef_subagente
                       );  
   --
   l_cod_act_tercero := em_k_g2001801.f_cod_act_tercero; 
   --
   OPEN l_c_subagentes;
   --                  
   FETCH l_c_subagentes INTO l_reg_subag;
   --
   WHILE l_c_subagentes%FOUND 
   LOOP
      --
      dc_k_v1001390.p_lee(p_cod_cia         => p_cod_cia            , 
                          p_cod_act_tercero => l_cod_act_tercero    , 
                          p_tip_docum       => l_reg_subag.tip_docum, 
                          p_cod_docum       => l_reg_subag.cod_docum, 
                          p_cod_tercero     => l_k_nulo             );
      --
      l_cod_tercero := dc_k_v1001390.f_cod_tercero;     
      --
      l_inx := l_inx + g_k_uno;   
      --
      p_t_tab_subag(l_inx) := l_cod_tercero; 
      -- 
      FETCH l_c_subagentes INTO l_reg_subag;
      -- 
   END LOOP;
   --
   CLOSE l_c_subagentes;
   --
   RETURN p_t_tab_subag;
 --      
 END;         
 --
 /*------------ DESCRIPCION -----------------------------
 || f_tip_relac :
 || Devuelve el valor de tip_relac
 */ -------------------------------------------------------- 
 --
 FUNCTION f_tip_relac
    RETURN VARCHAR2
 IS
 --
 BEGIN
    --
    p_comprueba_error;
    --
    RETURN reg.tip_relac;
    --
 END f_tip_relac;
 --
 /*---------------------------------------------------------
 || f_existe_reg :
 || Devuelve un valor booleano para saber si existe el registro
 */ -------------------------------------------------------- 
 --
 FUNCTION f_existe_reg
    RETURN BOOLEAN
 IS
 --
 BEGIN
    --
    RETURN g_existe_reg;
    --
 END f_existe_reg;
 --
 /*------------ DESCRIPCION -----------------------------
 || p_actualiza_interv_anul :
 ||  
 || que actualiza los intervinientes de la poliza.
 */ -------------------------------------------------------- 
 --
 PROCEDURE p_actualiza_interv_anul (p_mca_vigente   a2000060.mca_vigente  %TYPE ,
                                    p_mca_baja      a2000060.mca_baja     %TYPE ,
                                    p_cod_cia       a2000030.cod_cia      %TYPE ,
                                    p_num_poliza    a2000030.num_poliza   %TYPE ,
                                    p_num_spto      a2000060.num_spto     %TYPE ,
                                    p_num_apli      a2000060.num_apli     %TYPE ,
                                    p_num_spto_apli a2000060.num_spto_apli%TYPE ,
                                    p_tip_docum     a2000060.tip_docum    %TYPE ,
                                    p_cod_docum     a2000060.cod_docum    %TYPE ,
                                    p_tip_benef     a2000060.tip_benef    %TYPE 
                                   )
 IS
 --
 BEGIN
    --
    --@mx('I','p_actualiza_interv_anul');
    --@mx('p_cod_cia ',p_cod_cia);
    UPDATE a2000060
       SET mca_vigente   = p_mca_vigente,
           mca_baja      = p_mca_baja
     WHERE cod_cia       = p_cod_cia
       AND num_poliza    = p_num_poliza
       AND num_spto      = p_num_spto
       AND num_apli      = p_num_apli
       AND num_spto_apli = p_num_spto_apli
       AND tip_docum     = p_tip_docum
       AND cod_docum     = p_cod_docum
       AND tip_benef     = p_tip_benef;
    --
    --@mx('F','p_actualiza_interv_anul');
    --
 END p_actualiza_interv_anul;
 --
 /* --------------------------------------------------------
 || f_reg_max_spto_ant :
 || 
 || Recupera el maximo suplemento previo a la anulaciÂ¿n.
 */ --------------------------------------------------------
 --
 FUNCTION f_reg_max_spto_ant(p_cod_cia       a2000060.cod_cia       %TYPE,
                             p_num_poliza    a2000060.num_poliza    %TYPE,
                             p_num_spto      a2000060.num_spto      %TYPE,
                             p_num_apli      a2000060.num_apli      %TYPE,
                             p_num_spto_apli a2000060.num_spto_apli %TYPE,
                             p_tip_docum     a2000060.tip_docum     %TYPE,
                             p_cod_docum     a2000060.cod_docum     %TYPE,
                             p_tip_benef     a2000060.tip_benef      %TYPE )
    RETURN a2000030.cod_spto%TYPE 
 IS
 --
    CURSOR cl_a2000060
    IS
       SELECT MAX(num_spto)
         FROM a2000060
        WHERE cod_cia           = p_cod_cia
          AND num_poliza        = p_num_poliza
          AND num_spto          < p_num_spto
          AND tip_docum         = p_tip_docum
          AND cod_docum         = p_cod_docum
          AND tip_benef         = p_tip_benef
          AND num_spto          NOT IN
               ( SELECT num_spto
                     FROM a2000030
                    WHERE cod_cia                 = p_cod_cia
                      AND num_poliza              = p_num_poliza
                      AND (    mca_spto_tmp       = trn.SI
                            OR mca_spto_anulado   = trn.SI
                            OR mca_poliza_anulada = trn.SI
                          )
                 );
     --
     CURSOR cl_a2000060_apli
     IS
        SELECT MAX(num_spto_apli)
          FROM a2000060
         WHERE cod_cia           = p_cod_cia
           AND num_poliza        = p_num_poliza
           AND num_spto          = p_num_spto
           AND num_apli          = p_num_apli
           AND tip_docum         = p_tip_docum
           AND cod_docum         = p_cod_docum
           AND tip_benef         = p_tip_benef           
           AND num_spto_apli     IN
             ( SELECT num_spto_apli
                 FROM a2000030
                WHERE cod_cia                 = p_cod_cia
                  AND num_poliza              = p_num_poliza
                  AND num_spto                = p_num_spto
                  AND num_apli                = p_num_apli
                  AND num_spto_apli          < p_num_spto_apli   
                  AND tip_spto                != 'AT'               
             );
    --
    l_spto_anu a2000030.cod_spto%TYPE;
 --
 BEGIN
    --
    --@mx('I','f_reg_max_spto_ant');
    --
    IF p_num_apli = trn.CERO
    THEN
       --
       OPEN  cl_a2000060;
       FETCH cl_a2000060 INTO l_spto_anu;
       CLOSE cl_a2000060;
       --
    ELSE
       --
       OPEN  cl_a2000060_apli;
       FETCH cl_a2000060_apli INTO l_spto_anu;
       CLOSE cl_a2000060_apli;
       --
    END IF;
    --
    --@mx('F','f_reg_max_spto_ant');
    --
    RETURN l_spto_anu;
    --
 END f_reg_max_spto_ant;
 --
 /*------------ DESCRIPCION -----------------------------
 || f_devuelve_interv_anul :
 || Devuelve los suplementos de anulaciÂ¿n que no existan 
 || en el spto de rehabilitaciÂ¿n
 */ --------------------------------------------------------
 -- 
 FUNCTION f_devuelve_interv_anul(p_cod_cia       a2000060.cod_cia      %TYPE,
                                 p_num_poliza    a2000060.num_poliza   %TYPE,
                                 p_num_spto      a2000060.num_spto     %TYPE,
                                 p_num_apli      a2000060.num_apli     %TYPE,
                                 p_num_spto_apli a2000060.num_spto_apli%TYPE)
    RETURN c_interv_anul 
 IS
 --
    l_c_dv_anul      c_interv_anul;
 --
 BEGIN
    --
    --@mx('I','f_devuelve_dv_anul');
    --
    IF l_c_dv_anul%ISOPEN
    THEN
       --
       CLOSE l_c_dv_anul;
       --
    END IF;
    --
    IF p_num_apli = trn.CERO
    THEN
       --
       OPEN l_c_dv_anul FOR
            SELECT a.cod_cia                   ,
                   a.num_poliza                ,
                   a.num_riesgo                ,
                   a.tip_benef                 ,
                   a.num_secu                  ,
                   a.tip_docum                 ,
                   a.cod_docum                 ,
                   a.mca_principal             ,
                   a.mca_calculo               ,
                   a.pct_participacion         ,
                   a.fec_vcto_cesion           ,
                   a.imp_cesion                ,
                   a.mca_baja                  ,
                   a.mca_vigente               ,
                   a.num_prestamo              ,
                   a.tip_relac                 ,
                   a.num_spto                  ,
                   a.num_apli                  ,
                   a.num_spto_apli
                FROM a2000060 a
               WHERE a.cod_cia       = p_cod_cia
                 AND a.num_poliza    = p_num_poliza
                 AND a.num_spto    
                     =
                     (SELECT MAX(c.num_spto)
                        FROM a2000030 c
                       WHERE c.cod_cia            = a.cod_cia
                         AND c.num_poliza         = a.num_poliza
                         AND c.mca_poliza_anulada = 'S'
                         AND c.tip_spto           = 'AT' --suplemento_anulacion_total
                     )
                 AND  (TIP_BENEF, TIP_DOCUM, COD_DOCUM) NOT IN (SELECT TIP_BENEF  , 
                                                                       TIP_DOCUM  , 
                                                                       COD_DOCUM  
                                                                FROM a2000060 b
                                                               WHERE b.cod_cia       = p_cod_cia
                                                                 AND b.num_poliza    = p_num_poliza
                                                                 AND b.num_spto      = p_num_spto                                                                 
                                                                 AND b.num_riesgo    = a.num_riesgo
                                                              ) ;
       --
    ELSE
       --
       OPEN l_c_dv_anul FOR
            SELECT a.cod_cia                   ,
                   a.num_poliza                ,
                   a.num_riesgo                ,
                   a.tip_benef                 ,
                   a.num_secu                  ,
                   a.tip_docum                 ,
                   a.cod_docum                 ,
                   a.mca_principal             ,
                   a.mca_calculo               ,
                   a.pct_participacion         ,
                   a.fec_vcto_cesion           ,
                   a.imp_cesion                ,
                   a.mca_baja                  ,
                   a.mca_vigente               ,
                   a.num_prestamo              ,
                   a.tip_relac                 ,
                   a.num_spto                  ,
                   a.num_apli                  ,
                   a.num_spto_apli
                FROM a2000060 a
               WHERE a.cod_cia       = p_cod_cia
                 AND a.num_poliza    = p_num_poliza
                 AND a.num_apli      = p_num_apli
                 AND a.num_spto_apli    
                     =
                     (SELECT MAX(c.num_spto_apli)
                        FROM a2000030 c
                       WHERE c.cod_cia            = a.cod_cia
                         AND c.num_poliza         = a.num_poliza
                         AND c.num_apli           = p_num_apli
                         AND c.mca_poliza_anulada = 'S'
                         AND c.tip_spto           = 'AT' --suplemento_anulacion_total
                     )
                 AND  (TIP_BENEF, TIP_DOCUM, COD_DOCUM) NOT IN (SELECT TIP_BENEF  , 
                                                                       TIP_DOCUM  , 
                                                                       COD_DOCUM  
                                                                FROM a2000060 b
                                                               WHERE b.cod_cia       = p_cod_cia
                                                                 AND b.num_poliza    = p_num_poliza
                                                                 AND b.num_spto      = p_num_spto                                                                 
                                                                 AND b.num_riesgo    = a.num_riesgo
                                                                 AND b.num_apli      = p_num_apli
                                                                 AND b.num_spto_apli = p_num_spto_apli                                        
                                                              ) ;
       --
    END IF;
    --
    RETURN l_c_dv_anul;
    --
    --@mx('F','f_devuelve_dv_anul');
    --
 END f_devuelve_interv_anul;
 --
 --
 /*------------ DESCRIPCION -----------------------------
 || f_devuelve_interv_anul :
 || Devuelve los suplementos de anulaciÂ¿n que no existan 
 || en el spto de rehabilitaciÂ¿n
 */ --------------------------------------------------------
 -- 
 PROCEDURE p_act_interv_anul (p_cod_cia       a2000060.cod_cia       %TYPE,
                              p_num_poliza    a2000060.num_poliza    %TYPE,
                              p_num_apli      a2000060.num_apli      %TYPE,
                              p_tip_docum     a2000060.tip_docum     %TYPE,
                              p_cod_docum     a2000060.cod_docum     %TYPE,
                              p_tip_benef     a2000060.tip_benef     %TYPE )
 IS
 BEGIN
    --
    --@mx('I','p_act_interv_anul');
    --
    IF p_num_apli = trn.CERO
    THEN
       --
       UPDATE a2000060 a
         SET mca_vigente = 'N'
       WHERE   a.cod_cia       = p_cod_cia
           AND a.num_poliza    = p_num_poliza
           AND a.tip_docum     = p_tip_docum
           AND a.cod_docum     = p_cod_docum
           AND a.tip_benef     = p_tip_benef
           AND a.num_spto    
               =
               (SELECT MAX(c.num_spto)
                  FROM a2000030 c
                 WHERE c.cod_cia            = a.cod_cia
                   AND c.num_poliza         = a.num_poliza
                   AND c.mca_poliza_anulada = 'S'
                   AND c.tip_spto           = 'AT' --suplemento_anulacion_total
               );
       --
    ELSE
       --
       UPDATE a2000060 a
         SET mca_vigente = 'N'
       WHERE a.cod_cia       = p_cod_cia
         AND a.num_poliza    = p_num_poliza
         AND a.num_apli      = p_num_apli
         AND a.tip_docum     = p_tip_docum
         AND a.cod_docum     = p_cod_docum
         AND a.tip_benef     = p_tip_benef                 
         AND a.num_spto_apli    
             =
             (SELECT MAX(c.num_spto_apli)
                FROM a2000030 c
               WHERE c.cod_cia            = a.cod_cia
                 AND c.num_poliza         = a.num_poliza
                 AND c.num_apli           = p_num_apli                 
                 AND c.mca_poliza_anulada = 'S'
                 AND c.tip_spto           = 'AT' --suplemento_anulacion_total
             );                  
       --
    END IF;
    --
    --@mx('F','p_act_interv_anul');
    --
 END p_act_interv_anul;
 --
 /*------------ DESCRIPCION -----------------------------
 || p_abre_cursor :
 ||  
 || Abre el cursor gc_a2000060.
 */ -------------------------------------------------------- 
 --
 PROCEDURE p_abre_cursor (p_cod_cia      IN  a2000060.cod_cia     %TYPE,
                          p_num_poliza   IN  a2000060.num_poliza  %TYPE)
 IS
 --
 BEGIN
    --
    --@mx('I','p_abre_cursor');
    --
    IF gc_a2000060%ISOPEN
    THEN
       --   
       CLOSE gc_a2000060;
       --
    END IF;
    --
    OPEN  gc_a2000060 (pc_cod_cia    => p_cod_cia   ,
                       pc_num_poliza => p_num_poliza);
    --
    --@mx('F','p_abre_cursor');
    --
 END p_abre_cursor;
 --
 /*------------ DESCRIPCION -----------------------------
 || p_lee_cursor :
 ||  
 || Lee el cursor gc_a2000060.
 */ -------------------------------------------------------- 
 --
 PROCEDURE p_lee_cursor (p_reg      OUT NOCOPY grecord_a2000060,
                         p_cerrado  OUT NOCOPY BOOLEAN         )        
 IS
    --
    p_reg_nulo a2000060%ROWTYPE;
    --
 BEGIN
    --
    --@mx('I','p_lee_cursor');
    --
    FETCH gc_a2000060 INTO p_reg;
    --
    p_cerrado := gc_a2000060%NOTFOUND;
    --
    IF p_cerrado
    THEN
       --
       p_reg := p_reg_nulo;
       --
       CLOSE   gc_a2000060;
       --
    END IF; 
    --
    --@mx('F','p_lee_cursor');
    --
 END p_lee_cursor;
 --
 /*------------ DESCRIPCION -----------------------------
 || p_cierra_cursor :
 ||  
 || Cierra el cursor gc_a2000060.
 */ -------------------------------------------------------- 
 --
 PROCEDURE p_cierra_cursor
 IS
 --
 BEGIN
    --
    --@mx('I','p_cierra_cursor');
    --
    IF gc_a2000060%ISOPEN
    THEN
       --
       CLOSE gc_a2000060;
       --
    END IF;
    --
    --@mx('F','p_cierra_cursor');
    --
 END p_cierra_cursor;
 --
 --
 /* --------------------------------------------------------
 || pp_devuelve_error : Devuelve un error
 */ --------------------------------------------------------
 --
 PROCEDURE pp_devuelve_error 
 IS
 --
 BEGIN
    --
    --@mx('I','pp_devuelve_error');
    --
    IF g_cod_mensaje BETWEEN 20000 AND 20999
    THEN
       --
       RAISE_APPLICATION_ERROR(-g_cod_mensaje                                                ,
                               ss_k_mensaje.f_texto_idioma(p_cod_mensaje => g_cod_mensaje,
                                                           p_cod_idioma  => g_cod_idioma ) ||
                               g_anx_mensaje                                                 );
       --
    ELSE
       --
       RAISE_APPLICATION_ERROR(-20000                                                       ,
                               ss_k_mensaje.f_texto_idioma(p_cod_mensaje => g_cod_mensaje,
                                                           p_cod_idioma  => g_cod_idioma) ||
                               g_anx_mensaje                                                );
       --
    END IF;
    --
    --@mx('F','pp_devuelve_error');
    --
 END pp_devuelve_error;
 --
 /*--------------------------------------------------------
 ||  p_lee_intervenciones :
 || 
 || Lee las intervenciones de una poliza para un spto,
 || apli, spto_apli y riesgo determinado. Luego son
 || devueltas en un registro.
 */--------------------------------------------------------
 --
 PROCEDURE p_lee_intervenciones(p_cod_cia       IN     a2000060.cod_cia         %TYPE,
                                p_num_poliza    IN     a2000060.num_poliza      %TYPE,
                                p_num_spto      IN     a2000060.num_spto        %TYPE,
                                p_num_apli      IN     a2000060.num_apli        %TYPE,
                                p_num_spto_apli IN     a2000060.num_spto_apli   %TYPE,
                                p_num_riesgo    IN     a2000060.num_riesgo      %TYPE,
                                p_record_interv    OUT g_tabla_intervinientes_v      )
 IS
 --
    CURSOR c_a2000060(pc_cod_cia       a2000060.cod_cia       %TYPE,
                      pc_num_poliza    a2000060.num_poliza    %TYPE,
                      pc_num_spto      a2000060.num_spto      %TYPE,
                      pc_num_apli      a2000060.num_apli      %TYPE,
                      pc_num_spto_apli a2000060.num_spto_apli %TYPE,
                      pc_num_riesgo    a2000060.num_riesgo    %TYPE)
    IS
       SELECT *
         FROM a2000060
        WHERE cod_cia       = pc_cod_cia
          AND num_poliza    = pc_num_poliza
          AND num_spto      = pc_num_spto
          AND num_apli      = pc_num_apli
          AND num_spto_apli = pc_num_spto_apli
          AND num_riesgo    = pc_num_riesgo; 
    --
    l_fila   NUMBER;
 --
 BEGIN
    --
    --@mx('I', 'p_lee_intervenciones')
    --
    l_fila := g_k_uno;
    --
    FOR l_reg IN c_a2000060(pc_cod_cia       => p_cod_cia      ,
                            pc_num_poliza    => p_num_poliza   ,
                            pc_num_spto      => p_num_spto     ,
                            pc_num_apli      => p_num_apli     ,
                            pc_num_spto_apli => p_num_spto_apli,
                            pc_num_riesgo    => p_num_riesgo   )
    LOOP
       --
       p_record_interv(l_fila).cod_cia            := l_reg.cod_cia          ;
       p_record_interv(l_fila).num_poliza         := l_reg.num_poliza       ;
       p_record_interv(l_fila).num_spto           := l_reg.num_spto         ;
       p_record_interv(l_fila).num_apli           := l_reg.num_apli         ;
       p_record_interv(l_fila).num_spto_apli      := l_reg.num_spto_apli    ;
       p_record_interv(l_fila).num_riesgo         := l_reg.num_riesgo       ;
       p_record_interv(l_fila).tip_benef          := l_reg.tip_benef        ;
       p_record_interv(l_fila).num_secu           := l_reg.num_secu         ;  
       p_record_interv(l_fila).tip_docum          := l_reg.tip_docum        ;
       p_record_interv(l_fila).cod_docum          := l_reg.cod_docum        ;
       p_record_interv(l_fila).mca_principal      := l_reg.mca_principal    ;
       p_record_interv(l_fila).mca_calculo        := l_reg.mca_calculo      ;  
       p_record_interv(l_fila).mca_baja           := l_reg.mca_baja         ;
       p_record_interv(l_fila).mca_vigente        := l_reg.mca_vigente      ;
       p_record_interv(l_fila).pct_participacion  := l_reg.pct_participacion;
       p_record_interv(l_fila).fec_vcto_cesion    := l_reg.fec_vcto_cesion  ;
       p_record_interv(l_fila).imp_cesion         := l_reg.imp_cesion       ;
       p_record_interv(l_fila).num_prestamo       := l_reg.num_prestamo     ;
       p_record_interv(l_fila).tip_relac          := l_reg.tip_relac        ;
       --
       l_fila := l_fila + g_k_uno;
       --
    END LOOP;                            
    --
    --@mx('F', 'p_lee_intervenciones')
    --
 END p_lee_intervenciones;
 --
 /* -----------------------------------------------------
 || f_devuelve_benef_riesgo :
 || Devuelve los intervinientes con un tipo tip_benef especifico
 */ -----------------------------------------------------
 --
 FUNCTION f_devuelve_benef_riesgo (p_cod_cia    a2000060.cod_cia    %TYPE,
                                   p_num_poliza a2000060.num_poliza %TYPE,
                                   p_num_spto   a2000060.num_spto   %TYPE,
                                   p_num_riesgo a2000060.num_riesgo %TYPE,
                                   p_tip_benef  a2000060.tip_benef  %TYPE)
    RETURN g_tabla_intervinientes_v IS
    --
    l_t_benef    g_tabla_intervinientes_v;
    --
 BEGIN
    --
    SELECT cod_cia                ,
           num_poliza             ,
           num_spto               ,
           num_apli               ,
           num_spto_apli          ,
           num_riesgo             ,
           tip_benef              ,
           num_secu               ,
           tip_docum              ,
           cod_docum              ,
           mca_principal          ,
           mca_calculo            ,
           mca_baja               ,
           mca_vigente            ,
           pct_participacion      ,
           fec_vcto_cesion        ,
           imp_cesion             ,
           num_prestamo           ,
           tip_relac
      BULK COLLECT INTO l_t_benef
      FROM a2000060 a
     WHERE a.cod_cia              = p_cod_cia
       AND a.num_poliza           = p_num_poliza
       AND a.num_riesgo           = p_num_riesgo
       AND a.tip_benef            = p_tip_benef
       AND NVL(a.mca_baja,trn.NO) = trn.NO
       AND a.mca_vigente          = trn.SI
       AND a.num_spto             = (SELECT MAX(b.num_spto)
                                       FROM a2000060 b
                                      WHERE b.cod_cia     = p_cod_cia
                                        AND b.num_poliza  = p_num_poliza
                                        AND b.num_spto   <= p_num_spto
                                        AND b.num_riesgo  = p_num_riesgo
                                        AND b.tip_benef   = p_tip_benef
                                        AND b.num_spto NOT IN (SELECT c.num_spto
                                                                 FROM a2000030 c
                                                                WHERE c.cod_cia    = p_cod_cia
                                                                  AND c.num_poliza = p_num_poliza
                                                                  AND NVL(c.mca_spto_anulado,trn.NO) = trn.SI
                                                              )
                                    )
       ;
    --
    RETURN l_t_benef;
    --
 END f_devuelve_benef_riesgo;
--
END em_k_a2000060_trn;
/
